.kmgoto.music.* -- libraries

1) BufferedEffector.java
2) TimeStretch.java

TimeStretch.java -- TDStretch.h, cpp
 public class TimeStretch extends BufferedEffector

 set constants DEFAULT...

 constcurtor
    super(channels, samplingRate)
    setParameters()
    setTempo

// private methods
    private void acceptNewOverlapLength(int newOverlapLength){
                 calculateOverlapLength
                 calcCrossCorr()
                 seekBestOverlapPositionFull()
         overlapMulti(output, input, overlapPosition)
         clearMidBuffer()
         calcSeqParameters()
         adaptNormalizer() {}
         processSamples() -- actual processing

// pub methods
 public TimeStretch(int channels, float samplingRate){
 public float[] getSamples(){
 public void flush(){ 
 // putSamples() inherited
 public void setTempo(float newTempo){
 public void clear(){}
 public void setParameters(float samplingRate, 
   int sequenceMs, int seekwindowMS, int overlapMS){
   calcSeqParameters();
   calculateOverlapLength(overlapMs);

++++++++++++++++++++++++++++++++++++
BufferedEffector.java 
public abstract class BufferedEffector {
  protected BufferedEffector(int channels, float samplingRate) -- constructor

  putSamples(array, len) or putSamples(float array) 
  abstruct, protected values
  abstruct protected void process()
++++++++++++++++++++++++++++++++++++
TimePitchPlayerJpp.java -- GUI
constructor
 // output port selector 難しい
 // input file selector
 // speed slider, pitch slider
 // play, stop, save, open log

setOutput (inputFile, mixer)
  get inputFile

setTempo(int) -- timeStretch.setTempo(tempo/pitchShift) 
setPitchShift(float) -- timeStretch.setTempo(temp0/pitchshift)
setGain()
setSkip()

run() {
   int audioInputSize = 4096*4; // 16bit LR
    currentFrame = skipTo/frameSize;
    running = true;
    resamplerL = new Resampler(true,0.1,4.0);
    resamplerR = new Resampler(true,0.1,4.0);
    timeStretch = new TimeStretch(channels,sampleRate);
    timeStretch.setTempo(tempo/pitchShift);

  // file
     waveWriter = new WaveWriter(format, inputFile, 
          String.valueOf((int) (100*tempo)));

  play
    ais.skip(skipTo);
    sline.start()    
   while (ais.read())
     timeStretch.putSamples(floatSamples)
     out = timeStretch.getSamples
     // float samples to L/R 16bit samples
     sline.write() // play audio
     or waveWriter.rawWrite()   

main()
   inputfile
   TimePitchPlayer player = new TimePitchPlayer
   args
   start player thread

event handler
buttons actionPerformed
   selectFile
   playButton -- startPlay(inputFile, outputPort, lastSec)
   saveButton
   stopButton
   logButton
   setPort(output)
sliderse stateChanged
   tempoSlider -- player.setTempo() 
   semitoneSlider -- player.setPitchShift(semitone string)
   volumeSlider -- player.setGain(integer string)
   timeSlider -- 

startSave(inputFile)
   player = new TimePitchPlayer(inputFile, null); // file output
   player.setSkip(0f);
   player.setTimeSlider(timeSlider);
   player.setTempo(tempoSlider.getValue());
   player.setPitchShift(value);
   Thread pt = new Thread(player);
   pt.start();

startPlay(File inputFile, Mixer.Info outputPort, float last){

      player = new TimePitchPlayer(inputFile, outputPort); 
      totalSec = player.getTotalTime();
      player.setGain(volumeSlider.getValue());
      player.setSkip(last);
        player.setTimeSlider(timeSlider);
      player.setTempo(tempoSlider.getValue());
      player.setPitchShift(value);
      Thread pt = new Thread(player);
      pt.start();
++++++++++++++++++++++++++
