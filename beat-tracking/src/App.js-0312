import React, {Component} from 'react';
import './App.css';
import BufferLoader from './buffer-loader';
import click1 from './cowbell_high.mp3';
import click2 from './cowbell_mid.mp3';
import packageJSON from '../package.json';
import {RFFT} from 'fftw-js';
import Windowing from 'fft-windowing';
import {autocorrelation} from 'autocorrelation';
import Stats from 'statsjs';

const version = (packageJSON.homepage + packageJSON.subversion).slice(-10);
const homepage = 'https://goto920.github.io' + packageJSON.homepage.slice(0,-8);

window.AudioContext = window.AudioContext || window.webkitAudioContext
const audioCtx = new window.AudioContext()

var click1Sample = undefined, click2Sample = undefined;

class App extends Component {
  constructor (props){
    super(props);
    this.params = {
       inputAudio: undefined,
       outputAudio: undefined,
       playing: undefined,
       combFilterMatrix: [], // 2D array
       beginTime: undefined,
       taps: [],
       testClick: [],
       tapLatency: 0,
       peaks: undefined
    }

    this.state = {
      startButtonStr: 'Wait'
    }

    this.loadFile = this.loadFile.bind(this);
    this.handlePlay = this.handlePlay.bind(this);
    this.handleTap = this.handleTap.bind(this);
    this.analyze = this.analyze.bind(this);
    this.addClick = this.addClick.bind(this);
    this.playAudio = this.playAudio.bind(this);
    this.calcPower = this.calcPower.bind(this);
    this.calcFlux = this.calcFlux.bind(this);
    this.calcMatrix = this.calcMatrix.bind(this);
    this.findPeaks = this.findPeaks.bind(this);
  } // end constructor

  componentDidMount () { // before render()
    window.addEventListener('beforeClosing', this.handleWindowClose);
    let inputFiles = [];
    inputFiles.push(click1); 
    inputFiles.push(click2);
    let bufferLoader =  new BufferLoader(
      audioCtx, inputFiles, function (bufferList) {
        click1Sample = bufferList[0];
        click2Sample = bufferList[1];
      }
    );

   bufferLoader.load()
  }

  componentWillUnmount () { // before closing app
    window.removeEventListener('beforeClosing', this.handleWindowClose);
  }

  render () {
    const {loadFile, handlePlay, handleTap} = this;
    const {startButtonStr} = this.state;
    return (
      <div className="App">
      Beat Tracking by goto@kmgoto.jp
      <hr />
      Input File: <br />
      <span className='selectFile'>
          <input type='file' name='loadFile' 
          accept='audio/*' onChange={loadFile} /><br />
      </span>
      <span>
          <button name='startPause' onClick={handlePlay}> 
          {startButtonStr}
          </button> &nbsp;&nbsp;
          <button name='tap' onClick={handleTap}> 
          TapBar
          </button> &nbsp;&nbsp;
      </span>
      <hr />
        Version: {version}, &nbsp;
        <a href={homepage} 
         target="_blank" rel="noopener noreferrer">Manual/Update</a>
      </div>
    );
  } // end render

  loadFile (event) {
    if (event.target.name !== 'loadFile') return;
    if (event.target.files.length === 0) return; // empty file name

    this.setState({totalTime: 0});
    this.setState({startButtonStr: 'Wait'});
    let file = event.target.files[0];

    let reader = new FileReader();

    reader.onload = function (e) {
       audioCtx.decodeAudioData(reader.result, 
        function(audioBuffer) {
          this.params.inputAudio = audioBuffer;
          // this.setState({startButtonStr: 'TapTest'});
          this.setState({startButtonStr: 'Play'});
          // this.setState({startButtonStr: 'startAnalysis'});
        }.bind(this),
        function (error) { console.log ("Filereader error: " + error.err);})
    }.bind(this)
    reader.readAsArrayBuffer(file);
  }

  handlePlay (event) {

    if (event.target.name !== 'startPause') return;

    if (this.state.startButtonStr === 'TapTest') {
      this.params.testClick = [];
      this.params.taps = [];
      this.playAudio(click1Sample);
      this.setState({startButtonStr: 'CheckTap'});
    }

    if (this.state.startButtonStr === 'CheckTap') {
      console.log(this.params.testClick);
      console.log(this.params.taps);
      this.params.taps = [];
    }

    if (this.state.startButtonStr === 'Play') {
      this.playAudio(this.params.inputAudio);
      this.setState({startButtonStr: 'Analyze'});
    }

    if (this.state.startButtonStr === 'Analyze') {
      if (this.params.playing !== undefined) {
        this.params.playing.disconnect();
        this.params.playing.stop();
        this.params.playing = undefined;
      }
      this.setState({startButtonStr: 'Processing'});
      console.log (this.params.taps); // debug
      this.addClick(this.params.inputAudio.sampleRate*0.19);
      this.setState({startButtonStr: 'PlayClick'});
    }

    if (this.state.startButtonStr === 'PlayClick') {
      console.log('PlayClick');
      this.playAudio(this.params.outputAudio);
    }

  }

  handleTap (event) {
    if (event.target.name !== 'tap') return;
    if (this.params.beginTime === undefined) return;

    let diff = audioCtx.currentTime - this.params.beginTime;

    if (this.state.startButtonStr === 'CheckTap') {
      this.params.taps.push(audioCtx.currentTime);
    } else {
      this.params.taps.push(diff);
    }
  }

  analyze () {
    const {inputAudio} = this.params;
    const {sampleRate, length, duration, numberOfChannels} = inputAudio;
    let mono = inputAudio.getChannelData(0);

    if (numberOfChannels === 2) {
      let left = inputAudio.getChannelData(0);
      let right = inputAudio.getChannelData(1);

      for (let i=0; i < length; i++){
           mono[i] = (left[i] + right[i])/2.0;
      }
      this.params.outputAudio = audioCtx.createBuffer(1,length,sampleRate);
//      this.params.outputAudio.copyToChannel(mono,0,0);
    }  // end stereo case 

    let size = 1024;
    let samples = new Float32Array(size);
    let lastPowerSpec = undefined, currentPowerSpec;
    let shift = size/2;
    let flux = [];
    let fftr = new RFFT(size);

    for (let n = 0; n < size; n++){ // initial
        if (n < shift) samples[n] = 0.0; // padding 0
        else samples[n] = mono[n - shift];
    }

    currentPowerSpec = this.calcPower(fftr.forward(Windowing.hann(samples)));
    // console.log ('flux[0]');

    flux[0] = this.calcFlux(lastPowerSpec, currentPowerSpec);

    // middle 
    for (let i = 1; i <= length/shift; i++){
      for (let n = 0; n < size; n++){
        if (shift*i + n < length)
          samples[n] = mono[shift*i + n];
        else
          samples[n] = 0;
      }
      currentPowerSpec =  this.calcPower(fftr.forward(Windowing.hann(samples)));

      flux[i] = this.calcFlux(lastPowerSpec, currentPowerSpec);
      lastPowerSpec = currentPowerSpec;
      // console.log ('flux[',i,']');
    }

    console.log ('FFT log power flux calculation completed');

    // Peak
    this.findPeaks(flux);
    // tempo, beat estimation

//    this.setState({startButtonStr: 'Play'});

  } // end analyze

  calcPower(fftresult){ // log power

    let N = fftresult.length; // power of two + 1
    let retval = [];
    let C = 1000.0/2; 
    // console.log('N = ', N);

    for (let i = 0; i < N/2; i++){
      if (i === 0) 
        retval[i] = fftresult[0]*fftresult[0]; // DC
      else if (i === N/2)
        retval[i] = fftresult[i]*fftresult[i]; // real only
      else
        retval[i] = fftresult[i]*fftresult[i]
               + fftresult[N-i]*fftresult[N-i]; // real and imaginary

      retval[i] = Math.log(1 + C*retval[i]);
    }

    return retval;
  }

  calcFlux(last, current){
    let retval = {all:0, low: 0, mid: 0, high: 0, presence: 0};
    let low = 4; // 172Hz  Unit 44100/(2*512) = 43Hz
                 // 46.875*4 = 187Hz (at 48000 rate)
    let mid = 20; // 860 Hz (937Hz)
    let high = 100; // 4300 Hz (4687Hz)

    for (let f = 1; f < current.length; f++){ // DC is ignored
         let diff; 
         if (last === undefined) 
           diff = Math.max(0, current[f]);
         else  
           diff = Math.max(0, current[f] - last[f]);

         retval.all += diff;
         if (f <= low)        retval.low += diff;
         else if (f <= mid)   retval.mid += diff;
         else if (f <= high)  retval.high += diff;
         else                 retval.presence += diff;
    }

    return retval;
  }

  calcMatrix (flux){
    let av_all  = flux[0].all;
  }

  findPeaks(flux){

    let onsets = [];
    let t = 0.8, range = 2.0;
    let av_all  = flux[0].all;
    let av_low  = flux[0].low;
    let av_mid  = flux[0].mid;
    let av_high = flux[0].high;
    let av_presence = flux[0].presence;

    console.log ('#', flux.length);

    for (let i=0; i < flux.length; i++){
      let all=0, low=0, high=0, mid=0, presence=0;

      if (flux[i].all > range*av_low) all = flux[i].all;
      if (flux[i].low > range*av_low) low = flux[i].low;
      if (flux[i].mid > range*av_mid) mid = flux[i].mid;
      if (flux[i].high > range*av_high) high = flux[i].high;
      if (flux[i].presence > range*av_presence) presence = flux[i].presence;

      onsets[i] = {all: all, low: low, mid: mid, high: high, presence: presence};

      av_all = t*av_all + (1-t)*flux[i].all;
      av_low = t*av_low + (1-t)*flux[i].low;
      av_mid = t*av_mid + (1-t)*flux[i].mid;
      av_high = t*av_high + (1-t)*flux[i].high;
      av_presence = t*av_presence + (1-t)*flux[i].presence;

    } // end for i

    let signal = [];
    let times = [];
    let intervals = [];


    for (let n = 0; n < onsets.length/512; n++) {
// for low
      signal = [];

      for (let i=0; i < 512 && 512*n + i < onsets.length; i++){ 
        signal[i] = onsets[512*n+i].low; 
        // if (n === 0) console.log (i,signal[i]);
      }

      let auto = autocorrelation (signal);
      if (n === 0) 
       for (let i=0; i < auto.length; i++) 
          console.log (i, auto[i], ' #');

      for (let i=20, j=0; i <= 100 && i < auto.length; i++) 
          if (auto[i] > 0.1) times[j++] = i;

      intervals[0] = times[0];
      for (let i=0, j=1; i < times.length - 1; i++) {
          let tmp = times[i+1] - times[i];
          if (tmp >= 20 && tmp <= 100) intervals[j++] = tmp;
      // 258 to 52 bpm at 44100, 1024 window, 50% overlap
      }

//      let fixed = Stats(intervals).removeOutliers();
//      let interval = fixed.max();
      let interval = Stats(intervals).max();

      let bpm  = 60/(interval*512/this.params.inputAudio.sampleRate);

      let time = (512*512*n)/this.params.inputAudio.sampleRate;

      console.log (intervals);
      console.log ('max low interval: ',  
                  interval, ' bpm: ', bpm, ' at: ', time);

/*
// mid
    signal = [];
    for (let i=0; i < 512; i++) signal[i] = flux[i].mid;
    let mid_auto = autocorrelation (signal);

    times = []
    for (let i=20, j=0; i <=100 && i < mid_auto.length; i++) 
      if (mid_auto[i] > 0.2) times[j++] = i;

    intervals = []; intervals[0] = times[0];
    for (let i=0, j=0; i < times.length - 1; i++) {
      let tmp = times[i+1] - times[i];
      if (tmp >= 20 && tmp <= 100) 
      intervals[j++] = tmp;
      // 258 to 52 bpm at 44100, 1024 window, 50% overlap
    }

    fixed = Stats(intervals).removeOutliers();
    let mid_interval = fixed.mean();
    let mid_bpm  = 60/(mid_interval*512/this.params.inputAudio.sampleRate);

    console.log (fixed.toArray());
    console.log ('mean mid interval: ', mid_interval, ' bpm: ', mid_bpm);

//  high 
    signal = [];
    for (let i=0; i < 512; i++) signal[i] = flux[i].high;

    let high_auto = autocorrelation (signal);

    times = []
    for (let i=20, j=0; i <=100 && i < high_auto.length; i++) 
      if (high_auto[i] > 0.2) times[j++] = i;

    intervals = []; intervals[0] = times[0];
    for (let i=0, j=0; i < times.length - 1; i++) {
      let tmp = times[i+1] - times[i];
      if (tmp >= 20 && tmp <= 100) 
      intervals[j++] = tmp;
      // 258 to 52 bpm at 44100, 1024 window, 50% overlap
    }

    fixed = Stats(intervals).removeOutliers();
    let high_interval = fixed.mean();
    let high_bpm  = 60/(high_interval*512/this.params.inputAudio.sampleRate);

    console.log (fixed.toArray());
    console.log ('mean high interval: ', high_interval, ' bpm: ', high_bpm);

//  presence 
    signal = [];
    for (let i=0; i < 512; i++) signal[i] = flux[i].presence;

    let presence_auto = autocorrelation (signal);

    times = []
    for (let i=20, j=0; i <=100 && i < presence_auto.length; i++) 
      if (presence_auto[i] > 0.2) times[j++] = i;

    intervals = []; intervals[0] = times[0];
    for (let i=0, j=0; i < times.length - 1; i++) {
      let tmp = times[i+1] - times[i];
      if (tmp >= 20 && tmp <= 100) 
      intervals[j++] = tmp;
      // 258 to 52 bpm at 44100, 1024 window, 50% overlap
    }

    fixed = Stats(intervals).removeOutliers();
    let presence_interval = fixed.max();
    let presence_bpm  = 60/(presence_interval*512/this.params.inputAudio.sampleRate);

    console.log (fixed.toArray());
    console.log ('an presence interval: ', presence_interval, 
       ' bpm: ', presence_bpm);
   */
   } // end for n 

    // return results;

  }

  playAudio(input){

    this.params.beginTime = audioCtx.currentTime;
    this.params.playing = audioCtx.createBufferSource();
    let music = this.params.playing;
    music.buffer = input;
    music.connect(audioCtx.destination);
    music.start(0);

  }

  addClick(latency){

    const {inputAudio} = this.params;
    const {sampleRate, length, duration, numberOfChannels} = inputAudio;
    let outputAudio 
       = audioCtx.createBuffer(numberOfChannels, length, sampleRate);
    let clickAudio 
       = audioCtx.createBuffer(2, length, sampleRate);

    this.params.outputAudio = outputAudio;

    let taps = this.params.taps;
    let click1L = click1Sample.getChannelData(0);
    let click1R = click1Sample.getChannelData(1);

    let mean = 0;
    for (let i=0; i < taps.length; i++){
      if (i+1 < taps.length) mean += taps[i+1] - taps[i];
      let offset = Math.round(sampleRate*taps[i]) - latency;
      clickAudio.copyToChannel(click1L, 0, offset);
      clickAudio.copyToChannel(click1R, 1, offset);
    }
    mean /= taps.length - 1;
    console.log ('bpm (bar, 1/4 note): ', 60/mean, 60*4/mean);

    if (numberOfChannels === 2) {
      let left = inputAudio.getChannelData(0);
      let right = inputAudio.getChannelData(1);
      let leftOut = outputAudio.getChannelData(0);
      let rightOut = outputAudio.getChannelData(1);
      let clickL = clickAudio.getChannelData(0);
      let clickR = clickAudio.getChannelData(1);

      for (let i = 0; i < left.length; i++){
        leftOut[i] = left[i] + clickL[i];
        rightOut[i] = right[i] + clickR[i];
      }

    } else if (numberOfChannels === 1){
      let mono = inputAudio.getChannelData(0);
      let monoOut = outputAudio.getChannelData(0);
      for (let i = 0; i < mono.length; i++) {
        monoOut[i] = mono[i];
      }
    }
//    console.log(outputAudio.duration);

  }

} // end class

export default App;
